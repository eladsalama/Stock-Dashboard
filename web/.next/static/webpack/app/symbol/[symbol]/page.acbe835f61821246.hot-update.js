"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/symbol/[symbol]/page",{

/***/ "(app-pages-browser)/./src/components/dashboard/AdvancedPriceChart.tsx":
/*!*********************************************************!*\
  !*** ./src/components/dashboard/AdvancedPriceChart.tsx ***!
  \*********************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ AdvancedPriceChart; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _layoutConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./layoutConfig */ \"(app-pages-browser)/./src/components/dashboard/layoutConfig.ts\");\n/* harmony import */ var _auth_context_AuthContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../auth-context/AuthContext */ \"(app-pages-browser)/./src/components/auth-context/AuthContext.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\nfunction AdvancedPriceChart(param) {\n    let { data, mode, range, logScale, showVolMA, showBollingerBands = false, showEMA20 = false, symbol } = param;\n    _s();\n    const { theme } = (0,_auth_context_AuthContext__WEBPACK_IMPORTED_MODULE_3__.useAuth)();\n    const [hover, setHover] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(null);\n    // Note: symbol prop defined but not used - chart is data-driven from parent's data prop\n    // Parent (DashboardClient) handles all data fetching via api.history()\n    // Backend already fetches the correct range, so we use sourceData directly\n    const sourceData = data || [];\n    const TARGET_PER_RANGE = {\n        \"1d\": 18,\n        \"1w\": 40,\n        \"1m\": 70,\n        \"3m\": 90,\n        \"1y\": 140,\n        \"5y\": 220\n    };\n    const target = TARGET_PER_RANGE[range] || 120;\n    let bucketSize = sourceData.length > target ? Math.ceil(sourceData.length / target) : 1;\n    if (range === \"1d\") bucketSize = 1; // never bucket intraday so ticks align with real times\n    // Calculate indicators on RAW sourceData BEFORE bucketing for maximum accuracy\n    const rawEma20 = showEMA20 ? ema(sourceData.map((d)=>d.c), 20) : [];\n    const rawVolMA = showVolMA ? sma(sourceData.map((d)=>d.v), 20) : [];\n    const rawBollingerBands = showBollingerBands ? calculateBollingerBands(sourceData.map((d)=>d.c)) : {\n        upper: [],\n        lower: [],\n        middle: []\n    };\n    function bucketAggregate(src, size) {\n        if (size <= 1) return src;\n        const out = [];\n        for(let i = 0; i < src.length; i += size){\n            const slice = src.slice(i, i + size);\n            if (!slice.length) continue;\n            const o = slice[0].o;\n            const c = slice[slice.length - 1].c;\n            let h = -Infinity, l = Infinity, v = 0;\n            for (const s of slice){\n                if (s.h > h) h = s.h;\n                if (s.l < l) l = s.l;\n                v += s.v;\n            }\n            out.push({\n                t: slice[0].t,\n                o,\n                h,\n                l,\n                c,\n                v\n            });\n        }\n        return out;\n    }\n    // Bucket indicators alongside the data (take every Nth value to match bucketing)\n    function bucketIndicator(values, size) {\n        if (size <= 1) return values;\n        const out = [];\n        for(let i = 0; i < values.length; i += size){\n            out.push(values[i]); // Take the first value of each bucket\n        }\n        return out;\n    }\n    const baseData = bucketSize === 1 ? sourceData : bucketAggregate(sourceData, bucketSize);\n    const bucketedEma20 = bucketSize === 1 ? rawEma20 : bucketIndicator(rawEma20, bucketSize);\n    const bucketedVolMA = bucketSize === 1 ? rawVolMA : bucketIndicator(rawVolMA, bucketSize);\n    const bucketedBollingerBands = bucketSize === 1 ? rawBollingerBands : {\n        upper: bucketIndicator(rawBollingerBands.upper, bucketSize),\n        lower: bucketIndicator(rawBollingerBands.lower, bucketSize),\n        middle: bucketIndicator(rawBollingerBands.middle, bucketSize)\n    };\n    // Backend fetches extra candles for indicator calculation (20-50 depending on range)\n    // After bucketing, we hide proportionally fewer candles\n    const bufferPerRange = {\n        \"1d\": 50,\n        \"1w\": 50,\n        \"1m\": 50,\n        \"3m\": 50,\n        \"1y\": 50,\n        \"5y\": 50\n    };\n    const bufferCandles = Math.min(bufferPerRange[range], Math.floor(baseData.length * 0.2));\n    const displayData = baseData.slice(bufferCandles); // Hide first candles from user\n    const [windowIdx, setWindowIdx] = react__WEBPACK_IMPORTED_MODULE_1___default().useState(()=>[\n            0,\n            displayData.length - 1\n        ]);\n    // Reset window when displayData length changes (range change or new data)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setWindowIdx([\n            0,\n            displayData.length - 1\n        ]);\n    }, [\n        displayData.length\n    ]);\n    // Always show full range unless user zooms/pans (windowIdx acts as user override after first wheel/drag)\n    const [wStart, wEnd] = windowIdx;\n    const fullStart = 0;\n    const fullEnd = displayData.length - 1;\n    const effectiveStart = wStart === 0 && wEnd === displayData.length - 1 ? fullStart : Math.max(0, Math.min(wStart, fullEnd));\n    const effectiveEnd = wStart === 0 && wEnd === displayData.length - 1 ? fullEnd : Math.min(wEnd, fullEnd);\n    const safeEnd = Math.min(effectiveEnd, displayData.length - 1);\n    const safeStart = Math.max(0, Math.min(effectiveStart, safeEnd - 5));\n    const drawData = displayData.slice(safeStart, safeEnd + 1);\n    // Slice pre-calculated indicators to match drawData (offset by buffer + window)\n    const indicatorStart = bufferCandles + safeStart;\n    const indicatorEnd = bufferCandles + safeEnd + 1;\n    const ema20 = bucketedEma20.slice(indicatorStart, indicatorEnd);\n    const volMA = bucketedVolMA.slice(indicatorStart, indicatorEnd);\n    const bollingerBands = {\n        upper: bucketedBollingerBands.upper.slice(indicatorStart, indicatorEnd),\n        lower: bucketedBollingerBands.lower.slice(indicatorStart, indicatorEnd),\n        middle: bucketedBollingerBands.middle.slice(indicatorStart, indicatorEnd)\n    };\n    const closes = drawData.map((d)=>d.c), highs = drawData.map((d)=>d.h), lows = drawData.map((d)=>d.l);\n    function quantile(arr, q) {\n        if (!arr.length) return 0;\n        const sorted = [\n            ...arr\n        ].sort((a, b)=>a - b);\n        const pos = (sorted.length - 1) * q;\n        const base = Math.floor(pos);\n        const rest = pos - base;\n        return sorted[base + 1] !== undefined ? sorted[base] + rest * (sorted[base + 1] - sorted[base]) : sorted[base];\n    }\n    let min = quantile(lows, 0.005), max = quantile(highs, 0.995);\n    const lastC = drawData[drawData.length - 1];\n    if (lastC) {\n        if (lastC.l < min) min = lastC.l;\n        if (lastC.h > max) max = lastC.h;\n    }\n    const span = max - min || 1;\n    // Single scale variable\n    const S = _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.CHART_SCALE; // affects vertical real estate\n    const hVisualBase = _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.GRAPH_HEIGHT; // baseline visual height from config\n    const volumePortion = 0.23; // fraction reserved for volume area\n    const hVisual = hVisualBase * S;\n    const volH = hVisual * volumePortion;\n    const priceH = hVisual - volH;\n    const axisFooter = _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.AXIS_FOOTER_HEIGHT;\n    const h = hVisual + axisFooter;\n    const w = _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.GRAPH_WIDTH;\n    const gutterRight = _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.AXIS_RIGHT_GUTTER;\n    const padTop = 8, padBottom = 6, padLeft = 4;\n    const priceArea = priceH - padTop - padBottom;\n    const up = closes[closes.length - 1] >= closes[0];\n    const priceW = w - gutterRight - padLeft;\n    // Index-based horizontal scale (removes time gaps for continuous display)\n    const numCandles = drawData.length;\n    function xForIdx(idx) {\n        return padLeft + idx / Math.max(1, numCandles - 1) * priceW;\n    }\n    // Store timestamps for labels\n    const drawTimes = drawData.map((d)=>new Date(d.t).getTime());\n    // Adaptive candle width from data density\n    let candleWidth;\n    if (numCandles <= 2) {\n        candleWidth = priceW / Math.max(1, numCandles) * 0.6;\n    } else {\n        candleWidth = priceW / numCandles * 0.8;\n    }\n    if (candleWidth < 3) candleWidth = 3;\n    if (candleWidth > 22) candleWidth = 22;\n    const linePts = drawData.map((d, idx)=>{\n        const x = xForIdx(idx);\n        const val = logScale ? (Math.log10(d.c) - Math.log10(min)) / (Math.log10(max) - Math.log10(min || 1)) : (d.c - min) / span;\n        const y = padTop + (priceArea - val * priceArea);\n        return \"\".concat(x, \",\").concat(y);\n    }).join(\" \");\n    const hoverPoint = hover != null ? drawData[hover] : null;\n    function onMove(e) {\n        const rect = e.currentTarget.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        // Index-based hover: find nearest candle by x position\n        if (drawData.length === 0) return;\n        const xRatio = Math.max(0, Math.min(1, (x - padLeft) / (rect.width - gutterRight / w * rect.width)));\n        const idx = Math.round(xRatio * (numCandles - 1));\n        setHover(Math.max(0, Math.min(numCandles - 1, idx)));\n    }\n    const dragState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    function onWheel(e) {\n        e.preventDefault();\n        if (drawData.length < 10) return;\n        const delta = e.deltaY;\n        const factor = delta > 0 ? 1.1 : 0.9;\n        const currentLen = wEnd - wStart + 1;\n        const newLen = Math.max(20, Math.min(displayData.length, Math.round(currentLen * factor)));\n        const rect = e.currentTarget.getBoundingClientRect();\n        const xRatio = (e.clientX - rect.left - padLeft) / (rect.width - gutterRight);\n        const focusIdx = wStart + Math.round(currentLen * xRatio);\n        let newStart = focusIdx - Math.round(newLen * xRatio);\n        let newEnd = newStart + newLen - 1;\n        if (newStart < 0) {\n            newStart = 0;\n            newEnd = newLen - 1;\n        }\n        if (newEnd > displayData.length - 1) {\n            newEnd = displayData.length - 1;\n            newStart = newEnd - newLen + 1;\n        }\n        setWindowIdx([\n            newStart,\n            newEnd\n        ]);\n    }\n    function onPointerDown(e) {\n        e.currentTarget.setPointerCapture(e.pointerId);\n        dragState.current = {\n            startX: e.clientX,\n            startRange: windowIdx\n        };\n    }\n    function onPointerMove(e) {\n        if (!dragState.current) return;\n        const [s, eIdx] = dragState.current.startRange;\n        const len = eIdx - s + 1;\n        const pixelPerCandle = priceW / drawData.length;\n        const deltaPx = e.clientX - dragState.current.startX;\n        const shift = Math.round(-deltaPx / pixelPerCandle);\n        let newStart = s + shift;\n        let newEnd = newStart + len - 1;\n        if (newStart < 0) {\n            newStart = 0;\n            newEnd = len - 1;\n        }\n        if (newEnd > displayData.length - 1) {\n            newEnd = displayData.length - 1;\n            newStart = newEnd - len + 1;\n        }\n        setWindowIdx([\n            newStart,\n            newEnd\n        ]);\n    }\n    function onPointerUp() {\n        dragState.current = null;\n    }\n    function niceTicks(low, high) {\n        let target = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5;\n        const rawSpan = high - low || 1;\n        const roughStep = rawSpan / (target - 1);\n        const pow10 = Math.pow(10, Math.floor(Math.log10(roughStep)));\n        const multiples = [\n            1,\n            2,\n            2.5,\n            5,\n            10\n        ];\n        const found = multiples.find((m)=>m * pow10 >= roughStep) || multiples[multiples.length - 1];\n        const step = found * pow10;\n        const first = Math.ceil(low / step) * step;\n        const ticks = [];\n        for(let v = first; v <= high; v += step)ticks.push(v);\n        return ticks;\n    }\n    // Time ticks per explicit spec\n    const timeTicks = [];\n    if (drawData.length > 1) {\n        if (range === \"1d\") {\n            // Show label every hour for cleaner display\n            const seen = new Set();\n            drawData.forEach((c, idx)=>{\n                const d = new Date(c.t);\n                const hh = d.getHours();\n                const mm = d.getMinutes();\n                // Show label every hour on the hour\n                if (mm === 0) {\n                    const timeKey = \"\".concat(hh, \":00\");\n                    if (!seen.has(timeKey)) {\n                        seen.add(timeKey);\n                        timeTicks.push({\n                            x: xForIdx(idx),\n                            label: d.toLocaleTimeString(\"en-US\", {\n                                hour: \"numeric\",\n                                minute: \"2-digit\",\n                                hour12: false\n                            })\n                        });\n                    }\n                }\n            });\n        } else if (range === \"1w\") {\n            const seen = new Set();\n            drawData.forEach((c, idx)=>{\n                const d = new Date(c.t);\n                const k = d.toDateString();\n                if (!seen.has(k)) {\n                    seen.add(k);\n                    timeTicks.push({\n                        x: xForIdx(idx),\n                        label: d.toLocaleDateString(undefined, {\n                            weekday: \"short\"\n                        }).toUpperCase()\n                    });\n                }\n            });\n        } else if (range === \"1m\") {\n            const seen = new Set();\n            drawData.forEach((c, idx)=>{\n                const d = new Date(c.t);\n                if (d.getDay() === 1) {\n                    const key = d.getFullYear() + \"-\" + d.getMonth() + \"-\" + d.getDate();\n                    if (!seen.has(key)) {\n                        seen.add(key);\n                        timeTicks.push({\n                            x: xForIdx(idx),\n                            label: d.getMonth() + 1 + \"/\" + d.getDate()\n                        });\n                    }\n                }\n            });\n        } else if (range === \"3m\") {\n            let mondayCount = 0;\n            drawData.forEach((c, idx)=>{\n                const d = new Date(c.t);\n                if (d.getDay() === 1) {\n                    if (mondayCount % 3 === 0) timeTicks.push({\n                        x: xForIdx(idx),\n                        label: d.getMonth() + 1 + \"/\" + d.getDate()\n                    });\n                    mondayCount++;\n                }\n            });\n        } else if (range === \"1y\") {\n            const seenMonth = new Set();\n            drawData.forEach((c, idx)=>{\n                const d = new Date(c.t);\n                const mk = d.getFullYear() + \"-\" + d.getMonth();\n                if (!seenMonth.has(mk) && d.getDate() <= 7) {\n                    seenMonth.add(mk);\n                    timeTicks.push({\n                        x: xForIdx(idx),\n                        label: d.toLocaleString(undefined, {\n                            month: \"short\"\n                        }).toUpperCase()\n                    });\n                }\n            });\n        } else if (range === \"5y\") {\n            const seenYear = new Set();\n            drawData.forEach((c, idx)=>{\n                const d = new Date(c.t);\n                if (!seenYear.has(d.getFullYear()) && d.getMonth() < 2) {\n                    seenYear.add(d.getFullYear());\n                    timeTicks.push({\n                        x: xForIdx(idx),\n                        label: String(d.getFullYear())\n                    });\n                }\n            });\n        }\n    }\n    const maxVol = Math.max(...drawData.map((d)=>d.v), 1);\n    const magnitude = Math.abs(max);\n    const decimals = magnitude >= 500 ? 0 : magnitude >= 100 ? 1 : 2;\n    function sma(src, period) {\n        if (src.length < period) return [];\n        const out = new Array(period - 1).fill(null); // Pad beginning with nulls\n        let sum = 0;\n        for(let i = 0; i < src.length; i++){\n            sum += src[i];\n            if (i >= period) sum -= src[i - period];\n            if (i >= period - 1) out.push(sum / period);\n        }\n        return out;\n    }\n    function ema(src, period) {\n        if (src.length < period) return [];\n        const k = 2 / (period + 1);\n        const out = new Array(period - 1).fill(null); // Pad beginning with nulls\n        // Start with SMA for first value\n        let sum = 0;\n        for(let i = 0; i < period; i++){\n            sum += src[i];\n        }\n        out.push(sum / period);\n        // Then use EMA formula\n        for(let i = period; i < src.length; i++){\n            out.push(src[i] * k + out[out.length - 1] * (1 - k));\n        }\n        return out;\n    }\n    function calculateBollingerBands(closes) {\n        let period = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20, stdDevMultiplier = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2;\n        if (closes.length < period) return {\n            upper: [],\n            lower: [],\n            middle: []\n        };\n        const middle = new Array(period - 1).fill(null);\n        const upper = new Array(period - 1).fill(null);\n        const lower = new Array(period - 1).fill(null);\n        for(let i = period - 1; i < closes.length; i++){\n            const slice = closes.slice(i - period + 1, i + 1);\n            const avg = slice.reduce((sum, val)=>sum + val, 0) / period;\n            const variance = slice.reduce((sum, val)=>sum + Math.pow(val - avg, 2), 0) / period;\n            const stdDev = Math.sqrt(variance);\n            middle.push(avg);\n            upper.push(avg + stdDevMultiplier * stdDev);\n            lower.push(avg - stdDevMultiplier * stdDev);\n        }\n        return {\n            upper,\n            lower,\n            middle\n        };\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            position: \"absolute\",\n            inset: 0,\n            fontSize: 11\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                viewBox: \"0 0 \".concat(w, \" \").concat(h),\n                preserveAspectRatio: \"none\",\n                style: {\n                    width: \"100%\",\n                    height: \"100%\",\n                    cursor: \"crosshair\",\n                    userSelect: \"none\",\n                    fontFamily: \"system-ui, ui-monospace, Menlo, monospace\"\n                },\n                onMouseMove: onMove,\n                onMouseLeave: ()=>setHover(null),\n                onWheel: onWheel,\n                onPointerDown: onPointerDown,\n                onPointerMove: onPointerMove,\n                onPointerUp: onPointerUp,\n                children: [\n                    niceTicks(min, max, 5).map((t)=>{\n                        const y = 8 + (priceArea - (t - min) / span * priceArea);\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"line\", {\n                                    x1: padLeft,\n                                    x2: padLeft + priceW,\n                                    y1: y,\n                                    y2: y,\n                                    stroke: theme === \"light\" ? \"#d0d7de\" : \"#30363d\",\n                                    strokeWidth: 1\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                    lineNumber: 392,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"text\", {\n                                    x: padLeft + priceW + _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.AXIS_Y_LABEL_X_OFFSET,\n                                    y: y + _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.AXIS_Y_FONT_SIZE / 3,\n                                    fill: theme === \"light\" ? \"#000000\" : \"#ffffff\",\n                                    fontSize: _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.AXIS_Y_FONT_SIZE,\n                                    children: t.toFixed(decimals)\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                    lineNumber: 400,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, t.toFixed(6), true, {\n                            fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                            lineNumber: 391,\n                            columnNumber: 13\n                        }, this);\n                    }),\n                    timeTicks.map((t, i)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"line\", {\n                            x1: t.x,\n                            x2: t.x,\n                            y1: 0,\n                            y2: hVisual,\n                            stroke: theme === \"light\" ? \"#d0d7de\" : \"#30363d\",\n                            strokeWidth: 1\n                        }, \"xtick-\" + i, false, {\n                            fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                            lineNumber: 414,\n                            columnNumber: 11\n                        }, this)),\n                    showBollingerBands && bollingerBands.upper.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"polygon\", {\n                                points: (()=>{\n                                    const points = [];\n                                    // Upper band\n                                    for(let i = 0; i < bollingerBands.upper.length; i++){\n                                        const upperVal = bollingerBands.upper[i];\n                                        if (upperVal === null) continue;\n                                        const x = xForIdx(i);\n                                        const val = (upperVal - min) / span;\n                                        const y = padTop + (priceArea - val * priceArea);\n                                        if (isFinite(x) && isFinite(y)) {\n                                            points.push(\"\".concat(x, \",\").concat(y));\n                                        }\n                                    }\n                                    // Lower band (reversed)\n                                    for(let i = bollingerBands.lower.length - 1; i >= 0; i--){\n                                        const lowerVal = bollingerBands.lower[i];\n                                        if (lowerVal === null) continue;\n                                        const x = xForIdx(i);\n                                        const val = (lowerVal - min) / span;\n                                        const y = padTop + (priceArea - val * priceArea);\n                                        if (isFinite(x) && isFinite(y)) {\n                                            points.push(\"\".concat(x, \",\").concat(y));\n                                        }\n                                    }\n                                    return points.join(\" \");\n                                })(),\n                                fill: \"rgba(135, 206, 235, 0.15)\",\n                                stroke: \"none\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                lineNumber: 429,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"polyline\", {\n                                points: bollingerBands.upper.map((v, i)=>{\n                                    if (v === null) return null;\n                                    const x = xForIdx(i);\n                                    const val = (v - min) / span;\n                                    const y = padTop + (priceArea - val * priceArea);\n                                    return \"\".concat(x, \",\").concat(y);\n                                }).filter((p)=>p !== null).join(\" \"),\n                                fill: \"none\",\n                                stroke: \"rgba(135, 206, 235, 0.8)\",\n                                strokeWidth: 1,\n                                vectorEffect: \"non-scaling-stroke\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                lineNumber: 461,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"polyline\", {\n                                points: bollingerBands.lower.map((v, i)=>{\n                                    if (v === null) return null;\n                                    const x = xForIdx(i);\n                                    const val = (v - min) / span;\n                                    const y = padTop + (priceArea - val * priceArea);\n                                    return \"\".concat(x, \",\").concat(y);\n                                }).filter((p)=>p !== null).join(\" \"),\n                                fill: \"none\",\n                                stroke: \"rgba(135, 206, 235, 0.8)\",\n                                strokeWidth: 1,\n                                vectorEffect: \"non-scaling-stroke\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                lineNumber: 479,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true),\n                    mode === \"line\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"polyline\", {\n                        points: linePts,\n                        fill: \"none\",\n                        stroke: up ? \"var(--color-success)\" : \"var(--color-danger)\",\n                        strokeWidth: 2,\n                        vectorEffect: \"non-scaling-stroke\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                        lineNumber: 498,\n                        columnNumber: 11\n                    }, this),\n                    mode === \"candles\" && drawData.map((d, idx)=>{\n                        const centerX = xForIdx(idx);\n                        const x = centerX - candleWidth / 2;\n                        const valOpen = logScale ? (Math.log10(d.o) - Math.log10(min)) / (Math.log10(max) - Math.log10(min || 1)) : (d.o - min) / span;\n                        const valClose = logScale ? (Math.log10(d.c) - Math.log10(min)) / (Math.log10(max) - Math.log10(min || 1)) : (d.c - min) / span;\n                        const valHigh = logScale ? (Math.log10(d.h) - Math.log10(min)) / (Math.log10(max) - Math.log10(min || 1)) : (d.h - min) / span;\n                        const valLow = logScale ? (Math.log10(d.l) - Math.log10(min)) / (Math.log10(max) - Math.log10(min || 1)) : (d.l - min) / span;\n                        const openY = 8 + (priceArea - valOpen * priceArea);\n                        const closeY = 8 + (priceArea - valClose * priceArea);\n                        const highY = 8 + (priceArea - valHigh * priceArea);\n                        const lowY = 8 + (priceArea - valLow * priceArea);\n                        const rising = d.c >= d.o;\n                        const pct = Math.min(0.05, Math.max(-0.05, (d.c - d.o) / d.o));\n                        const intensity = Math.abs(pct) / 0.05;\n                        const baseColor = rising ? \"var(--color-success)\" : \"var(--color-danger)\";\n                        const fill = rising ? \"rgba(35,134,54,\".concat(0.35 + 0.55 * intensity, \")\") : \"rgba(248,81,73,\".concat(0.35 + 0.55 * intensity, \")\");\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"line\", {\n                                    x1: x + candleWidth / 2,\n                                    x2: x + candleWidth / 2,\n                                    y1: highY,\n                                    y2: lowY,\n                                    stroke: baseColor,\n                                    strokeWidth: 1\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                    lineNumber: 535,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"rect\", {\n                                    x: x,\n                                    y: Math.min(openY, closeY),\n                                    width: candleWidth,\n                                    height: Math.max(2, Math.abs(closeY - openY)),\n                                    fill: fill,\n                                    stroke: baseColor,\n                                    strokeWidth: 0.5\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                    lineNumber: 543,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, d.t, true, {\n                            fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                            lineNumber: 534,\n                            columnNumber: 15\n                        }, this);\n                    }),\n                    showEMA20 && ema20.length && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"polyline\", {\n                        points: ema20.map((v, i)=>{\n                            if (v === null) return null;\n                            const x = xForIdx(i);\n                            const val = logScale ? (Math.log10(v) - Math.log10(min)) / (Math.log10(max) - Math.log10(min || 1)) : (v - min) / span;\n                            const y = 8 + (priceArea - val * priceArea);\n                            return \"\".concat(x, \",\").concat(y);\n                        }).filter((p)=>p !== null).join(\" \"),\n                        fill: \"none\",\n                        stroke: \"#ff9500\",\n                        strokeWidth: 1.4,\n                        vectorEffect: \"non-scaling-stroke\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                        lineNumber: 558,\n                        columnNumber: 11\n                    }, this),\n                    drawData.map((d, idx)=>{\n                        const centerX = xForIdx(idx);\n                        const x = centerX - candleWidth / 2;\n                        const volRatio = d.v / maxVol;\n                        let barH = volRatio * (volH - 16);\n                        // Minimum bar height for visibility (especially for low after-hours volume)\n                        const minBarHeight = 2;\n                        if (barH > 0 && barH < minBarHeight) barH = minBarHeight;\n                        const y = priceH + (volH - barH);\n                        const rising = d.c >= d.o;\n                        // Check if this is extended hours (before 9:30 or after 16:00 ET)\n                        const candleDate = new Date(d.t);\n                        const hour = candleDate.getHours();\n                        const minute = candleDate.getMinutes();\n                        const timeInMinutes = hour * 60 + minute;\n                        const marketOpen = 9 * 60 + 30; // 9:30 AM\n                        const marketClose = 16 * 60; // 4:00 PM\n                        const isExtendedHours = timeInMinutes < marketOpen || timeInMinutes >= marketClose;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"rect\", {\n                            x: x,\n                            y: y,\n                            width: candleWidth,\n                            height: barH,\n                            fill: rising ? \"var(--color-success)\" : \"var(--color-danger)\",\n                            opacity: isExtendedHours ? 0.2 : 0.35\n                        }, d.t + \":vol\", false, {\n                            fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                            lineNumber: 601,\n                            columnNumber: 13\n                        }, this);\n                    }),\n                    showVolMA && volMA.length && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"polyline\", {\n                        points: volMA.map((v, i)=>{\n                            if (v === null) return null;\n                            const x = xForIdx(i);\n                            const ratio = v / maxVol;\n                            const barH = ratio * (volH - 16);\n                            const y = priceH + (volH - barH);\n                            return \"\".concat(x, \",\").concat(y);\n                        }).filter((p)=>p !== null).join(\" \"),\n                        fill: \"none\",\n                        stroke: \"#58a6ff\",\n                        strokeWidth: 1,\n                        vectorEffect: \"non-scaling-stroke\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                        lineNumber: 613,\n                        columnNumber: 11\n                    }, this),\n                    hoverPoint && (()=>{\n                        const x = xForIdx(hover);\n                        const y = 8 + (priceArea - (hoverPoint.c - min) / span * priceArea);\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"line\", {\n                                    x1: x,\n                                    x2: x,\n                                    y1: 0,\n                                    y2: priceH,\n                                    stroke: theme === \"light\" ? \"#656d76\" : \"#7d8590\",\n                                    strokeDasharray: \"4 3\",\n                                    strokeWidth: 1\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                    lineNumber: 637,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"line\", {\n                                    x1: 0,\n                                    x2: w,\n                                    y1: y,\n                                    y2: y,\n                                    stroke: theme === \"light\" ? \"#656d76\" : \"#7d8590\",\n                                    strokeDasharray: \"4 3\",\n                                    strokeWidth: 1\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                    lineNumber: 646,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                                    cx: x,\n                                    cy: y,\n                                    r: 5,\n                                    fill: \"var(--color-bg)\",\n                                    stroke: up ? \"var(--color-success)\" : \"var(--color-danger)\",\n                                    strokeWidth: 2\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                    lineNumber: 655,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                            lineNumber: 636,\n                            columnNumber: 15\n                        }, this);\n                    })(),\n                    drawData.length > 0 && (()=>{\n                        const last = drawData[drawData.length - 1];\n                        const y = 8 + (priceArea - (last.c - min) / span * priceArea);\n                        const isUp = last.c >= closes[0];\n                        // Brighter, higher contrast colors for last price label\n                        const brightGreen = \"#00ff41\"; // Bright neon green\n                        const brightRed = \"#ff3366\"; // Bright red\n                        const color = isUp ? brightGreen : brightRed;\n                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"line\", {\n                                    x1: padLeft,\n                                    x2: padLeft + priceW,\n                                    y1: y,\n                                    y2: y,\n                                    stroke: color,\n                                    strokeDasharray: \"2 4\",\n                                    strokeWidth: 1\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                    lineNumber: 678,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"rect\", {\n                                    x: padLeft + priceW + 4,\n                                    y: y - _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.LAST_PRICE_LABEL_HEIGHT / 2,\n                                    width: _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.LAST_PRICE_LABEL_WIDTH,\n                                    height: _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.LAST_PRICE_LABEL_HEIGHT,\n                                    fill: isUp ? theme === \"light\" ? \"#e6fff0\" : \"#002211\" : theme === \"light\" ? \"#ffe6ee\" : \"#2d0011\",\n                                    stroke: color,\n                                    rx: 3\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                    lineNumber: 687,\n                                    columnNumber: 17\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"text\", {\n                                    x: padLeft + priceW + 4 + _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.LAST_PRICE_LABEL_WIDTH / 2,\n                                    y: y + _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.LAST_PRICE_LABEL_FONT_SIZE / 3,\n                                    textAnchor: \"middle\",\n                                    fill: color,\n                                    fontSize: _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.LAST_PRICE_LABEL_FONT_SIZE,\n                                    fontWeight: 600,\n                                    children: last.c.toFixed(decimals)\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                    lineNumber: 698,\n                                    columnNumber: 17\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                            lineNumber: 677,\n                            columnNumber: 15\n                        }, this);\n                    })(),\n                    (()=>{\n                        var _drawData_;\n                        const labels = [];\n                        // Main price position\n                        const lastPrice = ((_drawData_ = drawData[drawData.length - 1]) === null || _drawData_ === void 0 ? void 0 : _drawData_.c) || 0;\n                        const priceY = 8 + (priceArea - (lastPrice - min) / span * priceArea);\n                        // EMA20\n                        if (showEMA20 && ema20.length > 0) {\n                            const lastEma = ema20[ema20.length - 1];\n                            if (lastEma !== null) {\n                                labels.push({\n                                    y: 8 + (priceArea - (lastEma - min) / span * priceArea),\n                                    value: lastEma,\n                                    color: \"#ff9500\",\n                                    bgColor: theme === \"light\" ? \"#fff5e6\" : \"#2d2400\",\n                                    stroke: \"#ff9500\"\n                                });\n                            }\n                        }\n                        // Bollinger Bands Upper\n                        if (showBollingerBands && bollingerBands.upper.length > 0) {\n                            const lastUpper = bollingerBands.upper[bollingerBands.upper.length - 1];\n                            if (lastUpper !== null) {\n                                labels.push({\n                                    y: 8 + (priceArea - (lastUpper - min) / span * priceArea),\n                                    value: lastUpper,\n                                    color: \"rgba(135, 206, 235, 1)\",\n                                    bgColor: theme === \"light\" ? \"#e6f7ff\" : \"#001a2d\",\n                                    stroke: \"rgba(135, 206, 235, 0.8)\"\n                                });\n                            }\n                        }\n                        // Bollinger Bands Lower\n                        if (showBollingerBands && bollingerBands.lower.length > 0) {\n                            const lastLower = bollingerBands.lower[bollingerBands.lower.length - 1];\n                            if (lastLower !== null) {\n                                labels.push({\n                                    y: 8 + (priceArea - (lastLower - min) / span * priceArea),\n                                    value: lastLower,\n                                    color: \"rgba(135, 206, 235, 1)\",\n                                    bgColor: theme === \"light\" ? \"#e6f7ff\" : \"#001a2d\",\n                                    stroke: \"rgba(135, 206, 235, 0.8)\"\n                                });\n                            }\n                        }\n                        // Adjust positions to avoid overlaps\n                        const minGap = _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.INDICATOR_LABEL_HEIGHT + 2;\n                        const adjustedLabels = labels.map((label)=>{\n                            let adjustedY = label.y;\n                            // Check overlap with main price label\n                            if (Math.abs(adjustedY - priceY) < minGap) {\n                                // Move above or below based on which side has more space\n                                if (adjustedY < priceY) {\n                                    // Label is above price, move it further up\n                                    adjustedY = priceY - minGap;\n                                } else {\n                                    // Label is below price, move it further down\n                                    adjustedY = priceY + minGap;\n                                }\n                            }\n                            return {\n                                ...label,\n                                y: adjustedY\n                            };\n                        });\n                        // Sort by Y position and adjust for overlaps between indicators\n                        adjustedLabels.sort((a, b)=>a.y - b.y);\n                        for(let i = 1; i < adjustedLabels.length; i++){\n                            if (adjustedLabels[i].y - adjustedLabels[i - 1].y < minGap) {\n                                adjustedLabels[i].y = adjustedLabels[i - 1].y + minGap;\n                            }\n                        }\n                        return adjustedLabels.map((label, idx)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"rect\", {\n                                        x: padLeft + priceW + 4,\n                                        y: label.y - _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.INDICATOR_LABEL_HEIGHT / 2,\n                                        width: _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.INDICATOR_LABEL_WIDTH,\n                                        height: _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.INDICATOR_LABEL_HEIGHT,\n                                        fill: label.bgColor,\n                                        stroke: label.stroke,\n                                        rx: 2\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                        lineNumber: 792,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"text\", {\n                                        x: padLeft + priceW + 4 + _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.INDICATOR_LABEL_WIDTH / 2,\n                                        y: label.y + _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.INDICATOR_LABEL_FONT_SIZE / 3,\n                                        textAnchor: \"middle\",\n                                        fill: label.color,\n                                        fontSize: _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.INDICATOR_LABEL_FONT_SIZE,\n                                        fontWeight: 600,\n                                        children: label.value.toFixed(decimals)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                        lineNumber: 801,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, \"indicator-label-\".concat(idx), true, {\n                                fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                                lineNumber: 791,\n                                columnNumber: 13\n                            }, this));\n                    })(),\n                    timeTicks.map((t, i)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"text\", {\n                            x: t.x,\n                            y: h - 6,\n                            textAnchor: \"middle\",\n                            fontSize: _layoutConfig__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.AXIS_X_FONT_SIZE,\n                            fill: theme === \"light\" ? \"#000000\" : \"#ffffff\",\n                            children: t.label\n                        }, \"xlabel-\" + i, false, {\n                            fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                            lineNumber: 816,\n                            columnNumber: 11\n                        }, this))\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                lineNumber: 371,\n                columnNumber: 7\n            }, this),\n            hoverPoint && (()=>{\n                const hoverX = xForIdx(hover);\n                const hoverXPercent = (hoverX - padLeft) / priceW * 100;\n                // Estimate tooltip width (approximate)\n                const tooltipWidth = 120; // pixels\n                const chartLeftPx = padLeft;\n                const chartRightPx = padLeft + priceW;\n                // Check if tooltip would overflow on right or left\n                const wouldOverflowRight = hoverX + tooltipWidth / 2 > chartRightPx;\n                const wouldOverflowLeft = hoverX - tooltipWidth / 2 < chartLeftPx;\n                let leftPos;\n                let rightPos;\n                let transform;\n                if (wouldOverflowRight) {\n                    // Anchor to right side of hover point\n                    rightPos = \"\".concat(100 - hoverXPercent, \"%\");\n                    transform = \"translateX(100%)\";\n                } else if (wouldOverflowLeft) {\n                    // Anchor to left side of hover point\n                    leftPos = \"\".concat(hoverXPercent, \"%\");\n                    transform = \"translateX(0)\";\n                } else {\n                    // Center on hover point (default)\n                    leftPos = \"\".concat(hoverXPercent, \"%\");\n                    transform = \"translateX(-50%)\";\n                }\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    style: {\n                        position: \"absolute\",\n                        left: leftPos,\n                        right: rightPos,\n                        top: 8,\n                        background: theme === \"light\" ? \"rgba(255,255,255,0.95)\" : \"rgba(0,0,0,0.78)\",\n                        padding: \"6px 8px\",\n                        borderRadius: 4,\n                        pointerEvents: \"none\",\n                        border: theme === \"light\" ? \"1px solid #d0d7de\" : \"1px solid #30363d\",\n                        whiteSpace: \"nowrap\",\n                        backdropFilter: \"blur(2px)\",\n                        color: theme === \"light\" ? \"#24292f\" : \"#e6edf3\",\n                        transform\n                    },\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                fontSize: 11,\n                                opacity: 0.7\n                            },\n                            children: new Date(hoverPoint.t).toLocaleString()\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                            lineNumber: 877,\n                            columnNumber: 13\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                fontWeight: 600\n                            },\n                            children: hoverPoint.c.toFixed(2)\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                            lineNumber: 880,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n                    lineNumber: 860,\n                    columnNumber: 11\n                }, this);\n            })()\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\salam\\\\Visual Studio Code\\\\Stock Dashboard\\\\web\\\\src\\\\components\\\\dashboard\\\\AdvancedPriceChart.tsx\",\n        lineNumber: 370,\n        columnNumber: 5\n    }, this);\n}\n_s(AdvancedPriceChart, \"lHy/StbT2zLTwfx1ruRUmtw45WE=\", false, function() {\n    return [\n        _auth_context_AuthContext__WEBPACK_IMPORTED_MODULE_3__.useAuth\n    ];\n});\n_c = AdvancedPriceChart;\nvar _c;\n$RefreshReg$(_c, \"AdvancedPriceChart\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/dashboard/AdvancedPriceChart.tsx\n"));

/***/ })

});